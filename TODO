== URGENT ==
[ ] loseConnection not closing connection WTF??!?!?!?!?!?
[ ] performance and timeout issues (!!!)
    [ ] XML parsing takes too much (binary XML?)
    [ ] using/parsing JID objects uses much time and memory
[ ] check for stanza loops (in particular with iq errors)
[ ] encoding problems in router?!?!?

== TODO ==
[ ] JIDCache: cache expiration and invalidation (instead of one big timeout)
[ ] connectionLost: unavailable presence should be sent only if client did not
[ ] stream compression
[ ] concurrency problem in offline delivery
    If Alice sends a message to Bob while Bob is connecting, there could be an
    exact moment when c2s sees the initial presence and deliver the message to
    Bob, but soom before Alice's c2s has already sent the message to offline
    storage for safety. Bob hasn't already ack'd the message yet, so it gets
    delivered twice: one from direct delivery (Alice->c2s->resolver->c2s->Bob),
    one from offline storage (offline->c2s->Bob). This can't be avoided without
    removing offline safety storing. However, clients could easily ignore
    duplicated messages...

== FUTURE ==
[ ] JIDCache: presence observers (might be used with subscriptions too)
[ ] multi-user chat (without using MUC)
[ ] stanza storage should be a component (?)
[ ] high performance router (maybe in C/C++? Or jabberd2 based?)
[ ] DHT-based presence lookup
    (will avoid presence probes, huge performance benefits)

== COMPLETED ==
[x] 2-steps (SMS) registration
[x] local conflicts disappearing WTF!?!?!?!?!?!?
[x] UNIX sockets in component communication
[x] JIDCache: reuse lookups (prevents multiple requests for the same JID)
[x] delivery receipts (s2s) - achieved through server-receipts
[x] client-side acknowledgement
[x] c2s resource conflict (sm)
[x] presence storage: remove <group> elements when storing
[x] stanza re-delivery when available presence
[x] refresh lookup only after some time after the last refresh
[x] be careful with MySQL/NOW(): we must always store in UTC!!
[x] JIDCache/resource conflicts: use timestamp to choose most recent result
    (actually there should be none because of initial presence broadcast, but who knows)
